import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { FaEye, FaEyeSlash, FaToggleOff, FaToggleOn } from "react-icons/fa";
import Loader from "../../../components/common/Loader";
import RequiredStar from "../../../components/common/RequiredStar";
const ClassForm = ({ handleSubmit, loading, onChangeHandler, setOpenModal, isEditing, setData, updatedPassword, setUpdatedPassword, setIsEditing, handleCancel, data, }) => {
    const [showPassword, setShowPassword] = useState(false);
    // console.log(data)
    return (_jsxs("form", { onSubmit: (e) => handleSubmit(e), className: "space-y-4 w-full max-w-lg mx-auto text-xs shadow-lg rounded-lg bg-white  p-6", children: [_jsx("h2", { className: "text-xl font-semibold text-stone-800  text-center", children: isEditing ? "Edit Details" : "Add Class" }), isEditing && (_jsx("div", { className: "flex px-2 items-center my-2 justify-end gap-2 ", children: data?.is_active ? (_jsxs(_Fragment, { children: [_jsx("p", { className: "font-semibold", children: "Active " }), " ", _jsx(FaToggleOn, { title: "Active", onClick: () => {
                                if (!confirm("Are you sure to Deactivate the account?")) {
                                    return;
                                }
                                setData((prev) => ({ ...prev, is_active: false }));
                            }, size: 25, className: "text-green-500 cursor-pointer" })] })) : (_jsxs(_Fragment, { children: [_jsx("p", { className: "font-semibold", children: "Not Active " }), _jsx(FaToggleOff, { size: 25, onClick: () => {
                                if (!confirm("Are you sure to Active the account?")) {
                                    return;
                                }
                                setData((prev) => ({ ...prev, is_active: true }));
                            }, title: "Inactive", className: "text-red-500 cursor-pointer" })] })) })), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsxs("label", { htmlFor: "name", className: "block text-xs font-medium text-stone-700 ", children: ["Class Name ", _jsx(RequiredStar, {})] }), _jsx("input", { type: "text", id: "name", required: true, name: "name", placeholder: "Full Name", className: "w-full mt-1 p-2 rounded-md border border-stone-300 dark:border-stone-700 bg-white  text-stone-800  focus:outline-none focus:ring-1 focus:ring-red-800", value: data?.name, onChange: onChangeHandler })] }), _jsxs("div", { children: [_jsxs("label", { htmlFor: "type", className: "block text-xs font-medium text-stone-700 ", children: ["Type ", _jsx(RequiredStar, {})] }), _jsxs("select", { id: "type", required: true, name: "type", className: "w-full mt-1 p-2 rounded-md border border-stone-300 dark:border-stone-700 bg-white  text-stone-800  focus:outline-none focus:ring-1 focus:ring-red-800", value: data?.type, onChange: onChangeHandler, children: [_jsx("option", { value: "", disabled: true, children: "Select Class Type" }), ["Senior", "Junior"].map((userType) => (_jsx("option", { value: userType, children: userType }, userType)))] })] })] }), _jsxs("div", { className: "relative", children: [_jsx("label", { htmlFor: "email", className: "block text-xs font-medium text-stone-700 ", children: isEditing ? ("Update Email (optional)") : (_jsxs(_Fragment, { children: ["Email ", _jsx(RequiredStar, {})] })) }), _jsx("input", { type: "email", id: "email", name: "email", required: true, placeholder: "Temporary Email", className: "w-full mt-1 pr-10 p-2 rounded-md border border-stone-300 dark:border-stone-700 bg-white  text-stone-800  focus:outline-none focus:ring-1 focus:ring-red-800", value: data?.email, onChange: onChangeHandler })] }), !isEditing && (_jsxs("div", { className: "relative", children: [_jsxs("label", { htmlFor: "password", className: "block text-xs font-medium text-stone-700 ", children: ["Password ", _jsx(RequiredStar, {})] }), _jsx("input", { type: showPassword ? "text" : "password", id: "password", name: "password", required: true, placeholder: "Temporary Password", className: "w-full mt-1 pr-10 p-2 rounded-md border border-stone-300 dark:border-stone-700 bg-white  text-stone-800  focus:outline-none focus:ring-1 focus:ring-red-800", value: data?.password, onChange: onChangeHandler }), _jsx("button", { type: "button", className: "absolute inset-y-0 top-5 right-3 flex items-center text-stone-500  focus:outline-none", onClick: () => setShowPassword((prev) => !prev), children: showPassword ? _jsx(FaEyeSlash, { size: 20 }) : _jsx(FaEye, { size: 20 }) })] })), isEditing && (_jsxs("div", { className: "relative", children: [_jsx("label", { htmlFor: "password", className: "block text-xs font-medium text-stone-700 ", children: "Update Password (Optional)" }), _jsx("input", { type: showPassword ? "text" : "password", id: "password", name: "password", required: true, placeholder: "Temporary Password", className: "w-full mt-1 pr-10 p-2 rounded-md border border-stone-300 dark:border-stone-700 bg-white  text-stone-800  focus:outline-none focus:ring-1 focus:ring-red-800", value: updatedPassword, onChange: (e) => setUpdatedPassword(e.target.value) }), _jsx("button", { type: "button", className: "absolute inset-y-0 top-5 right-3 flex items-center text-stone-500  focus:outline-none", onClick: () => setShowPassword((prev) => !prev), children: showPassword ? _jsx(FaEyeSlash, { size: 20 }) : _jsx(FaEye, { size: 20 }) })] })), _jsxs("div", { className: "flex items-center justify-between gap-4 flex-wrap", children: [_jsx("button", { type: "submit", className: "w-full md:w-auto px-6 py-2 bg-red-800 text-white font-medium rounded-md shadow hover:bg-red-600\r\n            ", children: loading ? _jsx(Loader, {}) : isEditing ? "Update" : "Add " }), _jsx("button", { type: "reset", onClick: () => {
                            setIsEditing(false);
                            setOpenModal(false);
                            handleCancel();
                        }, className: "w-full md:w-auto px-6 py-2 bg-stone-800 text-white font-medium rounded-md shadow hover:bg-stone-600  focus:outline-none focus:ring-2 focus:ring-red-700", children: "Cancel" })] })] }));
};
export default ClassForm;
